from typing import List

class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        if sum(nums) % 2 != 0:
            return False
        target = int(sum(nums)/2)
        dp = [[None for _ in range(target+1)] for _ in range(len(nums))]
        dp[0][0] = True
        def knapsack(i, weight):
            if dp[i][weight]:
                return dp[i][weight]
            if weight == 0:
                return True
            if weight < 0 or i == 0:
                return False
            dp[i][weight] = knapsack(i-1, weight) or knapsack(i-1, weight-nums[i])
            return dp[i][weight]
        return knapsack(len(nums)-1, target)

solution = Solution()
nums
print(solution.canPartition(nums))